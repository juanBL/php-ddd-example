name: CI/CD

on:
  push:
    branches:
      - main

  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: set lower case gh repository name
        run: |
          echo "GH_LOWER_CASE=${GH_REPO_LOWER_CASE,,}" >>${GITHUB_ENV}
        env:
          GH_REPO_LOWER_CASE: '${{ github.repository }}'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push all-in-one
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          platforms: linux/amd64
          push: true
          target: all-in-one
          tags: ${{ env.REGISTRY }}/${{ env.GH_LOWER_CASE }}:all-in-one-${{ github.sha }},${{ env.REGISTRY }}/${{ env.GH_LOWER_CASE }}:all-in-one-latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.GH_LOWER_CASE }}:all-in-one-latest
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.GH_LOWER_CASE }}:all-in-one-latest,mode=max

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v3.2
        with:
          version: v1.25.0

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Get kubeconfig
        run: aws eks --region us-west-2 update-kubeconfig --name ecosystem-template-cluster

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV

      - name: Check if private-api-backend deployment exists in production
        id: api_private_deploy_exist_prod
        run: |
          DOES_DEPLOYMENT_EXISTS_PROD=$(kubectl describe deployment ecosystem-backend-private-api -n ecosystem >/dev/null 2>&1 && echo "1" || echo "0")
          echo "::set-output name=api_private_deploy_exist_prod::$DOES_DEPLOYMENT_EXISTS_PROD"

      - name: Check if private-api-backend deployment exists in dev
        id: api_private_deploy_exist_dev
        run: |
          DOES_DEPLOYMENT_EXISTS_DEV=$(kubectl describe deployment ecosystem-backend-private-api -n ecosystem-dev >/dev/null 2>&1 && echo "1" || echo "0")
          echo "::set-output name=api_private_deploy_exist_dev::$DOES_DEPLOYMENT_EXISTS_DEV"
